import net from 'net';
import fs from 'fs';
import path from 'path';
import { getTextBlockMock } from '../../mocks/TextBlocks';
import { ChunkHeaderType } from '../../shared/types/ChunkHeaderType';
import { TCP_CONFIG } from './config';

type ChunkStorage = {
  chunks: Buffer[];
  received: number;
  total: number;
};

const fileBuffersMap = new Map<number, ChunkStorage>();
let buffer = Buffer.alloc(0); // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

export const startBackendMockServer = () => {
  const server = net.createServer((socket) => {
    console.log('üì¶üü¢ Client connected to mock Backend TCP server');

    socket.on('data', (data) => {
      // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ
      buffer = Buffer.concat([buffer, data]);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã, –ø–æ–∫–∞ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
      while (buffer.length >= TCP_CONFIG.HEADER_CHUNK_SIZE) {
        const headerRaw = buffer.slice(0, TCP_CONFIG.HEADER_CHUNK_SIZE).toString(); // –°—á–∏—Ç—ã–≤–∞–µ–º 64 –±–∞–π—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        let headerObj: ChunkHeaderType;

        // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        try {
          headerObj = JSON.parse(headerRaw);
        } catch (e) {
          console.error('üì¶‚ùå Failed to parse header:', e.message, 'Raw header:', headerRaw);
          // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, —Å–¥–≤–∏–≥–∞–µ–º –±—É—Ñ–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          // buffer = buffer.slice(1);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±—É—Ñ–µ—Ä–µ –µ—Å—Ç—å –≤–µ—Å—å –ø–∞–∫–µ—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–µ–ª–æ)
        const packetSize = TCP_CONFIG.HEADER_CHUNK_SIZE + headerObj.length;
        if (buffer.length < packetSize) {
          break; // –ñ–¥—ë–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ —á–∞–Ω–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
        const body = buffer.slice(TCP_CONFIG.HEADER_CHUNK_SIZE, packetSize);
        buffer = buffer.slice(packetSize);

        const { id, index, total } = headerObj;
        console.log(`üì¶ Received chunk ${index + 1} of ${total} for ${buffer.slice(0, TCP_CONFIG.HEADER_CHUNK_SIZE).toString()}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞–Ω–∫
        if (!fileBuffersMap.has(id)) {
          fileBuffersMap.set(id, {
            chunks: new Array(total),
            received: 0,
            total,
          });
        }

        const storage = fileBuffersMap.get(id)!;
        storage.chunks[index] = body;
        storage.received++;

        // –ï—Å–ª–∏ –≤—Å–µ —á–∞–Ω–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        if (storage.received === total) {
          const completeBuffer = Buffer.concat(storage.chunks);
          const filePath = path.join(__dirname, `screenshot-${id}.png`);

          fs.writeFile(filePath, completeBuffer, (err) => {
            if (err) {
              console.error('üì¶‚ùå Error saving screenshot:', err);
            } else {
              console.log('üì¶‚úÖ Screenshot saved to:', filePath);
            }
          });

          fileBuffersMap.delete(id);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        const response = JSON.stringify(getTextBlockMock(1)) + '\n';
        socket.write(response);
      }
    });

    socket.on('end', () => {
      console.log('üì¶üî¥ Client disconnected');
    });
  });

  server.listen(TCP_CONFIG.PORT, TCP_CONFIG.HOST, () => {
    console.log('üì¶üöÄ Mock Backend TCP Server is running');
  });
};